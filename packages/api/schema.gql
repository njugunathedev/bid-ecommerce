# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# New Category Data
input AddCategoryInput {
  id: ID!
  title: String!
  children: [AddCategoryInput!]
  type: String!
  icon: String!
  number_of_product: Float = 0
  slug: String!
  created_date: DateTime!
}

# New coupon data
input AddCouponInput {
  id: ID!
  title: String!
  number_of_coupon: Int!
  discount_in_percent: Int!
  category: String!
  products: [AddProductInput!]
  code: String!
  minimum_amount: Int = 0
  status: String = "active"
  expiration_date: DateTime
  description: String
  creation_date: DateTime!
}

# New product data
input AddProductInput {
  id: String!
  slug: String!
  title: String!
  type: String!
  categories: [AddCategoryInput!]!
  unit: String!
  image: String!
  gallery: [GalleryInput!]
  description: String!
  price: Float!
  salePrice: Float!
  discountInPercent: Float!
  author: AuthorInput
  meta: MetaInput
  totalTickets: Float
  ticket: [TicketInput!]
  creation_date: DateTime!
  quantity: Float!
}

type Address {
  id: String!
  type: String!
  name: String!
  info: String!
}

# New stuff data
input AddStuffInput {
  id: ID!
  first_name: String!
  last_name: String!
  contact_number: String!
  email: String!
  role: String!
  name: String
  creation_date: DateTime!
}

type Author {
  id: ID!
  name: String!
  avatar: String!
  bio: String!
  email: String!
  website: String!
  socials: [Social!]!
}

input AuthorInput {
  id: ID!
  name: String!
  avatar: String!
  bio: String!
  email: String!
  website: String!
  socials: [SocialInput!]!
}

type Card {
  id: String!
  type: String!
  name: String!
  cardType: String!
  lastFourDigit: Float!
}

type Category {
  id: ID!
  title: String!
  children: [Category!]
  type: String!
  icon: String!
  number_of_product: Float
  slug: String!
  created_date: DateTime!
}

type Contact {
  id: String!
  type: String!
  number: String!
}

type Coupon {
  id: ID!
  title: String!
  number_of_coupon: Int!
  number_of_used_coupon: Int
  discount_in_percent: Int!
  category: String!
  products: [Product!]
  code: String!
  minimum_amount: Int
  status: String
  expiration_date: DateTime
  description: String
  creation_date: DateTime!
}

type Customer {
  id: ID!
  password: String
  name: String!
  email: String!
  image: String!
  address: [Address!]!
  contact: [Contact!]!
  card: [Card!]!
  created_date: DateTime
  has_blocked: Boolean
  total_order: Int
  total_order_amount: Int
  rank: String
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Gallery {
  id: ID!
  url: String!
}

input GalleryInput {
  id: String!
  url: String!
}

type Meta {
  id: ID!
  publisher: String!
  isbn: String!
  edition: String!
  country: String!
  languages: [String!]!
  numberOfReader: String!
  numberOfPage: String!
  samplePDF: String!
}

input MetaInput {
  id: ID!
  publisher: String!
  isbn: String!
  edition: String!
  country: String!
  languages: [String!]!
  numberOfReader: String!
  numberOfPage: String!
  samplePDF: String!
}

type Mutation {
  # Add an Ticket
  addTicket(ticketInput: TicketInput!): Ticket!

  # Close Product Ticket
  closeProductTickets(productId: String!): Product!

  # Create Product
  createProduct(product: AddProductInput!): Product!

  # Create Category
  createCategory(category: AddCategoryInput!): Category!
  createCoupon(coupon: AddCouponInput!): Coupon!

  # Create Stuff
  createStuff(stuff: AddStuffInput!): Stuff!

  # Close tickets
  closeTicket(id: String!): Ticket!
}

type Order {
  id: ID!
  userId: String!
  products: [OrderedProduct!]!
  status: String!
  deliveryTime: String!
  amount: String!
  subtotal: String!
  discount: String!
  deliveryFee: String!
  deliveryAddress: String!
  date: String!
}

type OrderedProduct {
  id: ID!
  title: String!
  weight: String!
  image: String!
  price: Int!
  category: String!
  quantity: Int!
  total: Int!
}

type Product {
  id: ID!
  description: String!
  slug: String!
  title: String!
  type: String!
  categories: [Category!]!
  unit: String!
  image: String!
  gallery: [Gallery!]
  price: Float!
  salePrice: Float!
  discountInPercent: Float!
  author: Author
  meta: Meta
  totalTickets: Float
  ticket: [Ticket!]
  creation_date: DateTime!
  quantity: Float!
}

type ProductResponse {
  items: [Product!]!
  total: Int!
  hasMore: Boolean!
}

type Products {
  items: [Product!]!
  totalCount: Int!
  hasMore: Boolean!
}

type Query {
  # Get single order
  ticket(id: String!): Ticket!

  # Get all orders
  tickets(limit: Int = 7, text: String, userId: String!): [Ticket!]!

  # Get all the products
  products(limit: Int = 12, offset: Int = 0, sortByPrice: String, type: String, searchText: String, category: String, slug: String, text: String): Products!

  # Get a single product
  getProduct(id: String!): Product!

  # Get a single product
  product(slug: String!): Product!

  # Get all the categories
  categories(searchBy: String = "", type: String): [Category!]!
  category(id: ID!): Category!
  customers(limit: Int = 7, sortBy: String = null, searchBy: String): [Customer!]!
  customer(id: ID!): Customer!

  # Get All Coupons
  coupons(searchBy: String, status: String): [Coupon!]!

  # Get all the Orders
  orders(searchText: String = "", limit: Int = 50, status: String): [Order!]!

  # Get single order
  order(id: ID!): Order!
  stuffs(searchBy: String, role: String): [Stuff!]!
  stuff(id: ID!): Stuff!

  # Get all orders
  getTickets(status: String, limit: Int = 7, text: String): [Ticket!]!
}

type Social {
  id: ID!
  media: String!
  profileLink: String!
}

input SocialInput {
  id: ID!
  media: String!
  profileLink: String!
}

type Stuff {
  id: ID!
  first_name: String!
  last_name: String!
  contact_number: String!
  email: String!
  role: String!
  name: String
  creation_date: DateTime!
}

type Ticket {
  id: ID!
  roundNumber: String!
  ticketNumber: String!
  ticketType: String!
  ticketStatus: String
  price: Int
  userId: String!
}

input TicketInput {
  id: ID!
  roundNumber: String!
  ticketNumber: String!
  ticketType: String!
  ticketStatus: String
  price: Int
  userId: String!
}

type User {
  id: ID!
  password: String
  name: String!
  email: String!
  image: String!
  address: [Address!]!
  contact: [Contact!]!
  card: [Card!]!
  created_date: DateTime
}
