# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# New Order Data
input AddOrderInput {
  id: ID!
  userId: String!
  products: [ProductInput!]
  status: Int!
  deliveryTime: String!
  amount: Int!
  subtotal: Int!
  discount: Int!
  deliveryFee: Int!
  deliveryAddress: String!
  date: String!
}

type Address {
  id: String!
  type: String!
  name: String!
  info: String!
}

# Address Input
input AddressInput {
  id: String!
  type: String!
  name: String!
  info: String!
}

type Author {
  id: ID!
  name: String!
  avatar: String!
  bio: String!
  email: String!
  website: String!
  socials: [Social!]!
}

type Card {
  id: String!
  type: String!
  name: String!
  cardType: String!
  lastFourDigit: Float!
}

# Card Input
input CardInput {
  id: String!
  type: String!
  name: String!
  cardType: String!
  lastFourDigit: Float!
}

type Category {
  id: ID!
  title: String!
  children: [Category!]
  type: String!
  icon: String!
  number_of_product: Float
  slug: String!
  created_date: DateTime!
}

type Contact {
  id: String!
  type: String!
  number: String!
}

# Contact Input
input ContactInput {
  id: String!
  type: String!
  number: String!
}

type Coupon {
  id: Float!
  code: String!
  image: String
  discountInPercent: Float!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Gallery {
  id: ID!
  url: String!
}

input GalleryInput {
  id: String!
  url: String!
}

type Meta {
  id: ID!
  publisher: String!
  isbn: String!
  edition: String!
  country: String!
  languages: [String!]!
  numberOfReader: String!
  numberOfPage: String!
  samplePDF: String!
}

type Mutation {
  # Update User
  updateMe(meInput: String!): User!

  # Update User
  registerUser(userInput: UserInput!): User!

  # Add or Edit Address
  updateAddress(addressInput: String!): User!

  # Add or Edit Contact
  updateContact(contactInput: String!): User!

  # Delete Address
  deleteAddress(addressId: String!): User!

  # Delete Contact
  deleteContact(contactId: String!): User!

  # Add Payment Card
  addPaymentCard(cardInput: String!): User!

  # Delete Payment Card
  deletePaymentCard(cardId: String!): User!

  # Update Product
  updateProduct(ticket: TicketInput!, id: String!): Product!

  # Charge a Payment
  charge(paymentInput: PaymentInput!): Payment!

  # Add an Order
  addOrder(orderInput: AddOrderInput!): Order!
  applyCoupon(code: String!): Coupon!

  # Add an Ticket
  addTicket(ticketInput: TicketInput!): Ticket!
}

type Order {
  id: ID!
  userId: String!
  products: [OrderedProduct!]!
  status: String!
  deliveryTime: String!
  amount: String!
  subtotal: String!
  discount: String!
  deliveryFee: String!
  deliveryAddress: String!
  date: String!
}

type OrderedProduct {
  id: ID!
  title: String!
  weight: String!
  image: String!
  price: Int!
  category: String!
  quantity: Int!
  total: Int!
}

type Payment {
  amount: String!
  token: String!
  status: String!
}

input PaymentInput {
  amount: String!
  token: String!
  status: String!
}

type Product {
  id: Float!
  slug: String!
  title: String!
  type: ProductType!
  categories: [Category!]!
  unit: String!
  image: String!
  gallery: [Gallery!]
  description: String!
  price: Float!
  salePrice: Float!
  discountInPercent: Float!
  author: Author
  meta: Meta
  totalTickets: Float
  ticket: [Ticket!]
  creation_date: DateTime!
  quantity: Float!
}

# Product Input
input ProductInput {
  id: ID!
  title: String!
  weight: String = "0 lbs"
  image: String!
  price: Int!
  category: String!
  quantity: Int!
  total: Int!
}

type ProductResponse {
  items: [Product!]!
  total: Int!
  hasMore: Boolean!
}

# The basic product types
enum ProductType {
  BOOK
  BAGS
  GROCERY
  HOME
  MEDICINE
  FOOD
  CLOTH
  CLOTHING
  FURNITURE
  MAKEUP
}

type Query {
  me(email: String!): User!

  # Get all the products
  products(category: String, text: String, type: String, offset: Int = 0, limit: Int = 10): ProductResponse!
  product(slug: String!): Product!

  # Get the Related products
  relatedProducts(type: String, slug: String!): [Product!]!

  # Get all the Orders
  orders(limit: Int = 7, text: String, user: String!): [Order!]!

  # Get single order
  order(id: String!): Order!

  # Get all the Coupons
  coupons: [Coupon!]!

  # Get all the categories
  categories(type: String!): [Category!]!
  category(id: String!): Category!

  # Get single order
  ticket(id: String!): Ticket!

  # Get all orders
  tickets(limit: Int = 7, text: String, userId: String!): [Ticket!]!
}

type Social {
  id: ID!
  media: String!
  profileLink: String!
}

type Ticket {
  id: ID!
  roundNumber: String!
  ticketNumber: String!
  ticketType: String!
  userId: String!
}

input TicketInput {
  id: ID!
  roundNumber: String!
  ticketNumber: String!
  ticketType: String!
  userId: String!
}

type User {
  id: ID!
  password: String
  name: String!
  email: String!
  image: String!
  address: [Address!]!
  contact: [Contact!]!
  card: [Card!]!
  created_date: DateTime
}

# User input type
input UserInput {
  id: ID!
  name: String!
  password: String
  email: String!
  image: String
  address: [AddressInput!]
  contact: [ContactInput!]
  card: [CardInput!]
  created_date: DateTime
}
